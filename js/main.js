// Generated by CoffeeScript 1.6.2
var Engine, Positioned, Renderable, Resources, renderer, testEngine;

Resources = (function() {
  var callbacks, get, load, onReady, ready, resources;

  resources = {};
  callbacks = [];
  ready = function() {
    return _.all(_.values(resources));
  };
  load = function(url) {
    var img;

    if (resources[url]) {
      return resources[url];
    } else {
      img = new Image();
      img.onload = function() {
        var cb, _i, _len, _results;

        resources[url] = img;
        if (ready()) {
          _results = [];
          for (_i = 0, _len = callbacks.length; _i < _len; _i++) {
            cb = callbacks[_i];
            _results.push(cb());
          }
          return _results;
        }
      };
      resources[url] = false;
      return img.src = url;
    }
  };
  get = function(url) {
    return resources[url];
  };
  onReady = function(callback) {
    callbacks.push(callback);
    if (ready() && !_.isEmpty(resources)) {
      return callback();
    }
  };
  return {
    load: load,
    get: get,
    onReady: onReady
  };
})();

Engine = (function() {
  function Engine(canvas) {
    this.ctx = canvas.getContext('2d');
    this.entities = {};
    this.systems = [];
    this.components = {};
    this.lastEntityId = 0;
  }

  Engine.prototype.createEntity = function(components) {
    this.entities[this.lastEntityId] = components;
    return this.lastEntityId += 1;
  };

  return Engine;

})();

Positioned = (function() {
  function Positioned(pos) {
    this.pos = pos != null ? pos : [0, 0];
  }

  return Positioned;

})();

Renderable = (function() {
  function Renderable(url, pos, size) {
    this.url = url != null ? url : "resources/sun.gif";
    this.pos = pos != null ? pos : [0, 0];
    this.size = size != null ? size : [128, 128];
  }

  return Renderable;

})();

renderer = function(ctx, entities) {
  var components, id, positioned, renderable, _results;

  _results = [];
  for (id in entities) {
    components = entities[id];
    renderable = components != null ? components.renderable : void 0;
    positioned = components != null ? components.positioned : void 0;
    if (renderable && positioned) {
      _results.push(ctx.drawImage(Resources.get(renderable.url), renderable.pos[0], renderable.pos[1], renderable.size[0], renderable.size[1], positioned.pos[0], positioned.pos[1], renderable.size[0], renderable.size[1]));
    } else {
      _results.push(console.log("not drawn: " + id));
    }
  }
  return _results;
};

testEngine = function(engine) {
  engine.createEntity({
    "renderable": new Renderable(),
    "positioned": new Positioned()
  });
  engine.createEntity({
    "renderable": new Renderable(),
    "positioned": new Positioned([200, 200])
  });
  engine.createEntity({
    "renderable": new Renderable()
  });
  console.log(engine.entities);
  return renderer(engine.ctx, engine.entities);
};

/*
//@ sourceMappingURL=main.map
*/
